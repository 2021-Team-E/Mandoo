"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCssUnit = exports.getRealStyle = void 0;
var react_table_1 = require("react-table");
function hasCssUnit(style) {
    return Number.isNaN(Number(style));
}
function getWidth(width) {
    if (hasCssUnit(width))
        return width;
    else
        return width + "px";
}
function getRealStyle(style, column) {
    if (style === void 0) { style = {}; }
    var width = column.width, widthWithCssUnit = column.widthWithCssUnit;
    if (hasCssUnit(width) || widthWithCssUnit) {
        style.width = widthWithCssUnit;
    }
    style.flex = 'none';
    return style;
}
exports.getRealStyle = getRealStyle;
exports.useCssUnit = function (hooks) {
    hooks.useInstance.push(useInstance);
    hooks.getHeaderProps.push(function (props, _a) {
        var column = _a.column;
        var style = props.style;
        return [
            props, {
                style: getRealStyle(style, column)
            }
        ];
    });
    hooks.getCellProps.push(function (props, _a) {
        var column = _a.cell.column;
        var style = props.style;
        return [
            props, {
                style: getRealStyle(style, column)
            }
        ];
    });
    hooks.getFooterProps.push(function (props, _a) {
        var column = _a.column;
        var style = props.style;
        return [
            props, {
                style: getRealStyle(style, column)
            }
        ];
    });
};
exports.useCssUnit.pluginName = 'useCssUnit';
function useInstance(instance) {
    var plugins = instance.plugins, totalColumnsMaxWidth = instance.totalColumnsMaxWidth, totalColumnsMinWidth = instance.totalColumnsMinWidth, totalColumnsWidth = instance.totalColumnsWidth, calculateColumnsMaxWidth = instance.calculateColumnsMaxWidth, calculateColumnsMinWidth = instance.calculateColumnsMinWidth, calculateColumnsWidth = instance.calculateColumnsWidth, headers = instance.headers;
    react_table_1.ensurePluginOrder(plugins, ['useBlockLayout',], 'useCssUnit');
    if (calculateColumnsWidth) {
        instance.totalColumnsWidth = calculateColumnsWidth(instance, totalColumnsWidth);
    }
    if (calculateColumnsMaxWidth) {
        instance.totalColumnsMaxWidth = calculateColumnsWidth(instance, totalColumnsMaxWidth);
    }
    if (calculateColumnsMinWidth) {
        instance.totalColumnsMinWidth = calculateColumnsMaxWidth(instance, totalColumnsMinWidth);
    }
    calcHeaderWidthWithCssUnit(headers);
}
function calcHeaderWidthWithCssUnit(headers) {
    return headers.map(function (header) {
        var subHeaders = header.headers;
        if (subHeaders && subHeaders.length) {
            var widths = calcHeaderWidthWithCssUnit(subHeaders);
            var width = widths.length > 1 ? "calc(" + widths.join(' + ') + ")" : widths[0];
            header.widthWithCssUnit = width;
            return width;
        }
        else {
            var width = getWidth(header.width);
            header.widthWithCssUnit = width;
            return width;
        }
    });
}
