version: "3.3"

services:
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "8000:8000"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - react
      - flask_app
    networks:
      - app-tier
    restart: "on-failure"

  react:
    build:
      context: ./frontend
    container_name: react
    ports:
      - 3000:3000
    volumes:
      - "./:/usr/src/app/"
      - "/usr/src/app/frontend/node_modules"
    stdin_open: true # react-script 3.4.1 부터 필요
    tty: true
    networks:
      - app-tier
    restart: always
    environment:
      # - VIRTUAL_HOST=himyteamnew.ml, www.himyteamnew.ml
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true # HMR을 위해 필요한 설정
    depends_on:
      - flask_app

  mongo_db:
    image: mongo:latest
    restart: unless-stopped
    networks:
      - app-tier
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: "admin"
    #   MONGO_INITDB_ROOT_PASSWORD: "password"
    #   MONGO_INITDB_DATABASE: Mandoo
    #   MONGODB_DATA_DIR: /data/db
    volumes:
      - ./mongo/db:/data/db
    ports:
      - "27017:27017"

  flask_app:
    stdin_open: true # docker run -i
    tty: true # docker run -t
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
    links:
      - mongo_db:mongo_db
    depends_on:
      - mongo_db
    networks:
      - app-tier
    restart: always

  prometheus:
    image: prom/prometheus:latest
    user: root
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - app-tier
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9101:9101
    networks:
      - app-tier
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - app-tier
    restart: always
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8081:8080
    networks:
      - app-tier
    restart: always
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana
    user: root
    depends_on:
      - prometheus
    ports:
      - 3001:3000
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - app-tier
      - grafana-tier
    restart: always

  redis:
    image: "redis:alpine"
    networks:
      - app-tier
    ports:
      - "6379:6379"

  # elastic_search:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
  #   container_name: es01
  #   environment:
  #     - node.name=es01
  #     - cluster.name=es-docker-cluster
  #     - cluster.initial_master_nodes=es01
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #   volumes:
  #     - ./elasticsearch/data01:/usr/share/elasticsearch/data
  #   ports:
  #     - 9200:9200
  #   networks:
  #     - app-tier

networks:
  app-tier:
    driver: bridge
  grafana-tier:
    driver: bridge
